#include <string>
#include <vector>
#include <iostream>
#include <queue>
#define MAX 100
using namespace std;

vector<int> solution(vector<int> progresses, vector<int> speeds) {
	vector<int> answer;
	vector<int> pre_answer;
	vector<int> new_p;
	queue<int> nn;

	int count = 0;
	int speed = 0;
	for (int i = 0; i < progresses.size(); i++) {
		new_p.push_back(MAX - progresses[i]);
		while (true) {
			speed += speeds[i];
			count++;
			if (new_p[i] <= speed) {
				pre_answer.push_back(count);
				break;
			}
		}
		count = 0;
		speed = 0;
	}
	//여긴 지우셈 확인용
	for (int i = 0; i < pre_answer.size(); i++) {
		cout << pre_answer[i] << ' ';
	}
	cout << " # ";
	//뒤가 앞보다 작으면 앞에 기준에 따라감
	for (int i = 0; i < pre_answer.size(); i++) {
		for (int j = i + 1; j < pre_answer.size(); j++) {
			if (pre_answer[i] > pre_answer[j]) {
				pre_answer.at(j) = pre_answer[i];
			}
		}
	}
	//5 10 10 10 20 20을 queue형태로 저장
	for (int i = 0; i < pre_answer.size(); i++) {
		nn.push(pre_answer[i]);
	}
	int pre = nn.front();
	nn.pop();
	count = 1;
	while (!nn.empty()) {
		if (!nn.empty() && pre == nn.front()) {
			count++;
		}
		else {
			answer.push_back(count);
			count = 1;
		}
		if (nn.size() == 1) {
			answer.push_back(count);
		}
		pre = nn.front();
		nn.pop();
	}
	for (int i = 0; i < answer.size(); i++) {
		cout << answer[i] << ' ';
	}

	cout << endl;
	return answer;
}

int main() {
	solution({ 93, 30, 55 }, { 1, 30, 5 }); //2, 1
	solution({ 95, 90, 99, 99, 80, 99 }, { 1, 1, 1, 1, 1, 1 }); //1, 3, 2
}